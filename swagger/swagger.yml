swagger: "2.0"
info:
  title: Connect API Console
  description: beego has a very cool tools to autogenerate documents for your API
  version: 1.0.0
  termsOfService: http://beego.me/
  contact:
    email: astaxie@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
basePath: /v1
paths:
  /post/all:
    get:
      tags:
      - post
      description: Retrieve user posts
      operationId: PostController.GetByUser
      responses:
        "200":
          description: '{int} []models.Post'
        "403":
          description: body is empty
  /post/save:
    post:
      tags:
      - post
      description: create new post
      operationId: PostController.CreatPost
      parameters:
      - in: body
        name: body
        description: body for post content
        required: true
        schema:
          $ref: '#/definitions/models.Post'
      responses:
        "200":
          description: '{int} models.Post.Id'
        "403":
          description: body is empty
  /post/vote:
    get:
      tags:
      - post
      description: Reterive user posts
      operationId: PostController.Vote
      parameters:
      - in: query
        name: voterId
        type: string
      - in: query
        name: vote
        schema:
          $ref: '#/definitions/models.VoteStruct'
      responses:
        "200":
          description: '{int} models.Vote.Id'
        "403":
          description: body is empty
  /user/:
    get:
      tags:
      - user
      description: get all Users
      operationId: UserController.GetAll
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.User'
  /user/{uid}:
    get:
      tags:
      - user
      description: get user by uid
      operationId: UserController.Get
      parameters:
      - in: path
        name: uid
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.User'
        "403":
          description: :uid is empty
    put:
      tags:
      - user
      description: update the user
      operationId: UserController.Update
      parameters:
      - in: path
        name: uid
        description: The uid you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for user content
        required: true
        schema:
          $ref: '#/definitions/models.User'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.User'
        "403":
          description: :uid is not int
  /user/login:
    post:
      tags:
      - user
      description: create tokens
      operationId: LoginController.Auth
      parameters:
      - in: body
        name: body
        description: body for user content
        required: true
        schema:
          $ref: '#/definitions/models.Auth'
      responses:
        "200":
          description: '{int} models.JWT'
        "403":
          description: body is empty
  /user/signup:
    post:
      tags:
      - user
      description: create users
      operationId: UserController.CreateUser
      parameters:
      - in: body
        name: body
        description: body for user content
        required: true
        schema:
          $ref: '#/definitions/models.User'
      responses:
        "200":
          description: '{int} models.User.Id'
        "403":
          description: body is empty
  /user/token/refresh:
    get:
      tags:
      - user
      description: refresh authentication token
      operationId: LoginController.Refresh
      responses:
        "200":
          description: '{string} models.JWT'
        "403":
          description: body is empty
definitions:
  bson.ObjectId:
    type: object
  models.Auth:
    title: Auth
    type: object
    properties:
      email:
        type: string
      password:
        type: string
  models.Post:
    title: Post
    type: object
    properties:
      content:
        type: string
      created_at:
        type: string
        format: string
      hash:
        type: string
      id:
        $ref: '#/definitions/bson.ObjectId'
      image:
        type: string
      poster:
        type: string
      updated_at:
        type: string
        format: string
      verified:
        type: boolean
      vote_count:
        type: integer
        format: int64
  models.SocialMedia:
    title: SocialMedia
    type: object
    properties:
      key:
        type: string
      name:
        type: string
      url:
        type: string
  models.User:
    title: User
    type: object
    properties:
      email:
        type: string
      first_name:
        type: string
      id:
        $ref: '#/definitions/bson.ObjectId'
      image:
        type: string
      last_name:
        type: string
      password:
        type: string
      social_media:
        type: array
        items:
          $ref: '#/definitions/models.SocialMedia'
      username:
        type: string
  models.VoteOptions:
    title: VoteOptions
    type: object
    properties:
      name:
        type: string
      value:
        type: string
  models.VoteStruct:
    title: VoteStruct
    type: object
    properties:
      image:
        type: string
      options:
        type: array
        items:
          $ref: '#/definitions/models.VoteOptions'
